buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://dev.saxonica.com/maven" }
  }

  configurations.all {
    resolutionStrategy {
      force 'xml-apis:xml-apis:1.4.01',
        "${saxonGroup}:${saxonEdition}:${saxonVersion}",
        "org.xmlresolver:xmlresolver:${xmlresolverVersion}",
        'com.nwalsh:sinclude:4.0.0'
    }
  }

  dependencies {
    classpath group: saxonGroup, name: saxonEdition, version: saxonVersion
    classpath group: 'org.docbook', name: 'schemas-docbook', version: docbookVersion
    classpath group: 'org.docbook', name: 'docbook-xslTNG', version: xslTNGversion
  }
}

plugins {
  id "java"
  id "maven-publish"
  id "signing"
  id 'com.github.gmazzo.buildconfig' version "3.0.3"
  id 'com.nwalsh.gradle.saxon.saxon-gradle' version '0.9.3'
  id 'com.nwalsh.gradle.relaxng.validate' version '0.0.8'
  id 'com.nwalsh.gradle.docker.container' version '0.0.3'
}

import com.nwalsh.gradle.saxon.SaxonXsltTask
import com.nwalsh.gradle.relaxng.validate.RelaxNGValidateTask
import com.nwalsh.gradle.docker.DockerContainer

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "https://dev.saxonica.com/maven" }
}

// Set saxonLicenseDir in gradle.properties, or from the
// command line if you have a license in some other place.
if (!hasProperty("saxonLicenseDir")) {
  if (System.getenv("SAXON_LICENSE_DIR") != null) {
    ext.saxonLicenseDir=System.getenv('SAXON_LICENSE_DIR')
  } else {
    ext.saxonLicenseDir=System.getenv('HOME') + "/java"
  }
}

configurations.all {
  resolutionStrategy {
    force 'xml-apis:xml-apis:1.4.01',
      "${saxonGroup}:${saxonEdition}:${saxonVersion}",
      "org.xmlresolver:xmlresolver:${xmlresolverVersion}",
      'com.nwalsh:sinclude:4.0.0'
  }
}

configurations {
  transform.extendsFrom documentation
  testsuite.extendsFrom testImplementation
}

dependencies {
  implementation (
    [group: 'org.nineml', name: grinderName, version: grinderVersion]
  )
  testImplementation (
    [group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.4.2'],
    [group: 'org.junit.platform', name: 'junit-platform-console-standalone', version: '1.7.1'],
    // For saxon:deep-equal
    [group: 'com.saxonica', name: 'Saxon-EE', version: saxonVersion],
    files(saxonLicenseDir)
  )
  testRuntimeOnly (
    [group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.4.2'],
    [group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.4.2'],
    [group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.8.2']
  )
  testsuite (
    files("${buildDir}/classes/java/main"),
    files("${buildDir}/classes/java/test"),
    files("${buildDir}/resources/main"),
    files("${buildDir}/resources/test")
  )
  documentation (
    [group: saxonGroup, name: saxonEdition, version: saxonVersion],
    [group: 'org.docbook', name: 'schemas-docbook', version: docbookVersion],
    [group: 'org.docbook', name: 'docbook-xslTNG', version: xslTNGversion]
  )
}

println("Building with Java version ${System.getProperty('java.version')}")

buildConfig {
  packageName('org.nineml.coffeefilter')
  buildConfigField('String', 'TITLE', "\"${filterTitle}\"")
  buildConfigField('String', 'VERSION', "\"${filterVersion}\"")
}

ext {
  c_coffeefilter = "coffeefilter"
  parserType = project.findProperty("parserType") ?: "earley"
  ignoreFailure = (project.findProperty("ignoreFailure") ?: "false") == "true" ? true : false
  pedantic = (project.findProperty("pedantic") ?: "false") == "true" ? true : false
}

saxon.configure {
  classpath configurations.transform
  initializer 'org.docbook.xsltng.extensions.Register'
}

docker_container.configure {
  workingDir = "docker"
}

// ============================================================

task testSuite(type: JavaExec,
               dependsOn: ["compileTestJava", "processTestResources"]) {
  inputs.files fileTree(dir: "${buildDir}/classes/java/main")
  inputs.files fileTree(dir: "${buildDir}/classes/java/test")
  inputs.files fileTree(dir: "${buildDir}/resources/main")
  inputs.files fileTree(dir: "${buildDir}/resources/test")
  inputs.files fileTree(dir: "${projectDir}/ixml/tests")

  String exceptionsFile = null
  String outputXML = null
  
  if (pedantic) {
    exceptionsFile = "${projectDir}/src/test/resources/pedantic-test-suite-exceptions"
    outputXML = "${buildDir}/test-report-${parserType}.xml"
  } else {
    exceptionsFile = "${projectDir}/src/test/resources/test-suite-exceptions"
    outputXML = "${buildDir}/test-report-${parserType}.xml"
  }

  inputs.file exceptionsFile
  outputs.file outputXML

  ignoreExitValue = ignoreFailure
  classpath = configurations.testsuite
  main = 'org.nineml.coffeefilter.TestDriver'
  args = ["-e:${exceptionsFile}",
          "-r:${outputXML}",
          parserType == "earley" ? "--earley" : "--gll",
          pedantic ? '--pedantic' : '--not-pedantic',
          'ixml/tests/test-catalog.xml']
}

task testSuiteReport(type: SaxonXsltTask, dependsOn: ["testSuite"]) {
  inputs.files fileTree(dir: "${projectDir}/ixml/tests")
  inputs.files files(testSuite)
  inputs.file "${projectDir}/tools/test-report/test-report.xsl"
  outputs.file "${buildDir}/website/test-report/index.html"

  input "${projectDir}/ixml/tests/test-catalog.xml"
  stylesheet "${projectDir}/tools/test-report/test-report.xsl"
  output "${buildDir}/website/test-report/index.html"
  parameters (
    'test-report.xml': "${buildDir}/test-report-${parserType}.xml"
  )

  doLast {
    copy {
      from ("${projectDir}/tools/test-report") {
        include "*.css"
      }
      into "${buildDir}/website/test-report"
    }
    copy {
      from ("${projectDir}/tools/test-report") {
        include "*.svg"
      }
      into "${buildDir}/website/test-report/img"
    }
  }
}
testSuite.finalizedBy testSuiteReport

jar {
  archiveBaseName = "${filterTitle}-${filterVersion}"
  manifest {
    attributes 'Built-By': 'Norman Walsh'
    attributes 'Implementation-Vendor': 'Norman Walsh'
    attributes 'Implementation-Title': filterTitle
    attributes 'Implementation-Version': filterVersion
  }
}

javadoc {
  inputs.file "${projectDir}/src/main/java/overview.html"
  inputs.files fileTree(dir: "${projectDir}/src/main")

  title 'An Invisible XML Parsing API'
  exclude 'org/nineml/coffeefilter/model/**'
  exclude 'org/nineml/coffeefilter/utils/**'
  exclude 'org/nineml/coffeefilter/BuildConfig.java'
  exclude 'org/nineml/coffeefilter/parser/CommonBuilder.java'
  options.showFromPublic()
  options.overview = 'src/main/java/overview.html'
  options.encoding('utf-8')
  options.docEncoding('utf-8')
  options.charSet('utf-8')
}

task dist(dependsOn:["test", "testSuite", "jar", "javadoc"]) {
  doLast {
    mkdir "${buildDir}/stage"
    mkdir "${buildDir}/stage/docs"
  }
  doLast {
    copy {
      from "${buildDir}/libs"
      into "${buildDir}/stage"
    }
  }
  doLast {
    copy {
      from "${buildDir}/docs"
      into "${buildDir}/stage/docs"
    }
  }
  doLast {
    copy {
      from "${projectDir}/README.md"
      into "${buildDir}/stage/docs"
    }
  }
}

task zipDist(type: Zip) {
  from "${buildDir}/stage"
  into "${filterName}-${filterVersion}"
  archiveFileName = "${filterName}-${filterVersion}.zip"
}
dist.finalizedBy zipDist

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: ['generateBuildConfig']) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:deprecation'
}

// ============================================================

task manual_xinclude(type: SaxonXsltTask, dependsOn: ["copyResources"]) {
  inputs.files fileTree(dir: "${projectDir}/src/website/xml")
  inputs.file "${projectDir}/website/xinclude.xsl"

  input "${projectDir}/src/website/xml/coffeefilter.xml"
  stylesheet "${projectDir}/website/xinclude.xsl"
  output "${buildDir}/tmp/coffeefilter.xml"
}

task manual_validate(type: RelaxNGValidateTask, dependsOn: ["manual_xinclude"]) {
  input manual_xinclude.outputs.files.singleFile
  output "${buildDir}/xml/coffeefilter.xml"
  schema "${projectDir}/website/docbook.rnc"
  compact true
}

task manual_augment(type: SaxonXsltTask, dependsOn: ["manual_validate"]) {
  input manual_validate.outputs.files.singleFile
  output "${buildDir}/aug/coffeefilter.xml"
  stylesheet "${projectDir}/tools/augment.xsl"
  parameters (
    'version': filterVersion,
    'coffeegrinder-version': grinderVersion,
  )
}

task website(type: SaxonXsltTask, dependsOn: ["manual_augment", "javadoc"]) {
  inputs.file "${projectDir}/tools/docbook.xsl"
  outputs.files fileTree(dir: "${buildDir}/website")

  input manual_augment.outputs.files.singleFile
  output "${buildDir}/website/index.html"
  stylesheet "${projectDir}/tools/docbook.xsl"
  initializer 'org.docbook.xsltng.extensions.Register'
  parameters (
    'mediaobject-input-base-uri': "file:${buildDir}/aug/",
    'mediaobject-output-base-uri': "/",
    'chunk': 'index.html',
    'chunk-output-base-uri': "${projectDir}/build/website/"
  )
}

task intro_validate(type: RelaxNGValidateTask) {
  input "${projectDir}/src/website/docs/invisible.xml"
  output "${buildDir}/xml/invisible.xml"
  schema "${projectDir}/website/docbook.rnc"
  compact true
}

task intro(type: SaxonXsltTask, dependsOn: ["intro_validate"]) {
  inputs.file "${projectDir}/tools/docbook.xsl"
  inputs.file intro_validate.outputs.files.singleFile
  outputs.file "${buildDir}/website/docs/invisible.html"

  input intro_validate.outputs.files.singleFile
  output "${buildDir}/website/docs/invisible.html"
  stylesheet "${projectDir}/tools/docbook.xsl"
  initializer 'org.docbook.xsltng.extensions.Register'
  parameters (
    'mediaobject-input-base-uri': "file:${buildDir}/aug/",
    'mediaobject-output-base-uri': "/",
    'chunk': 'invisible.html',
    'chunk-output-base-uri': "${buildDir}/website/docs/"
  )
}
website.finalizedBy intro

task writing_validate(type: RelaxNGValidateTask) {
  input "${projectDir}/src/website/docs/writing.xml"
  output "${buildDir}/xml/writing.xml"
  schema "${projectDir}/website/docbook.rnc"
  compact true
}

task writing_copy() {
  doFirst {
    copy {
      from ("${projectDir}/src/website/docs") {
        include "*.png"
      }
      into "${buildDir}/xml"
    }
  }
  doLast {
    copy {
      from ("${projectDir}/src/website/docs") {
        include "*.png"
      }
      into "${buildDir}/website/docs"
    }
  }
}

task writing(type: SaxonXsltTask, dependsOn: ["writing_validate", "writing_copy"]) {
  inputs.file "${projectDir}/tools/docbook.xsl"
  inputs.file writing_validate.outputs.files.singleFile
  outputs.file "${buildDir}/website/docs/writing.html"

  input writing_validate.outputs.files.singleFile
  output "${buildDir}/website/docs/writing.html"
  stylesheet "${projectDir}/tools/docbook.xsl"
  initializer 'org.docbook.xsltng.extensions.Register'
  parameters (
    'mediaobject-input-base-uri': "file:${buildDir}/xml/",
    'mediaobject-output-base-uri': "./",
    'chunk': 'writing.html',
    'chunk-output-base-uri': "${buildDir}/website/docs/"
  )
}
website.finalizedBy writing

task website_javadoc(type: Copy, dependsOn: ["javadoc"]) {
  from javadoc.destinationDir
  into "${buildDir}/website/apidoc"
}
website.finalizedBy website_javadoc

task copyResources(dependsOn: ["copyJarResources", "copyStaticResources"]) {
  // nop
}

task copyJarResources() {
  outputs.files fileTree(dir: "${buildDir}/website")

  def dbjar = null
  configurations.transform.each { path ->
    if (path.toString().contains("docbook-xslTNG")) {
      dbjar = path
    }
  }

  doLast {
    if (dbjar == null) {
      throw new GradleException("Failed to locate DocBook xslTNG jar file")
    }
    copy {
      into "${buildDir}/website"
      from ({ zipTree(dbjar.toString()) }) {
        include "org/docbook/xsltng/resources/**"
      }
      eachFile { fileCopyDetails ->
        def originalPath = fileCopyDetails.path
        fileCopyDetails.path = originalPath.replace('org/docbook/xsltng/resources/', '')
      }
    }
  }

  doLast {
    delete "${buildDir}/website/org"
  }
}

task copyStaticResources() {
  inputs.files fileTree(dir: "${projectDir}/src/website/resources")
  inputs.files fileTree(dir: "${projectDir}/src/website/xml")
  inputs.files fileTree(dir: "${projectDir}/website/resources")
  outputs.files fileTree(dir: "${buildDir}/website")
  outputs.files fileTree(dir: "${buildDir}/aug")

  doLast {
    copy {
      into "${buildDir}/website"
      from "${projectDir}/src/website/resources"
    }
  }

  doLast {
    copy {
      from "${projectDir}/src/website/xml/images"
      into "${buildDir}/website/images"
    }
  }

  doLast {
    copy {
      into "${buildDir}/website"
      from "${projectDir}/website/resources"
    }
  }

  // FIXME: Grotesque hack. 
  doLast {
    copy {
      from "${projectDir}/src/website/xml/images"
      into "${buildDir}/aug/images"
    }
  }

  // FIXME: Grotesque hack. 
  doLast {
    copy {
      from "${projectDir}/src/website/resources/images"
      into "${buildDir}/aug/images"
    }
  }

  doLast {
    copy {
      from "${projectDir}/src/website/xml/examples"
      into "${buildDir}/website/examples"
    }
  }
}

// ============================================================

signing {
  sign publishing.publications
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      pom {
        name = filterTitle
        packaging = 'jar'
        description = 'An ixml parser'
        url = 'https://github.com/nineml/coffeefilter'

        scm {
          url = 'scm:git@github.com:nineml/coffeefilter.git'
          connection = 'scm:git@github.com:nineml/coffeefilter.git'
          developerConnection = 'scm:git@github.com:nineml/coffeefilter.git'
        }

        licenses {
          license {
            name = 'Mozilla Public License Version 2.0'
            url = 'http://www.mozilla.org/MPL/2.0/'
            distribution = 'repo'
          }
        }

        developers {
          developer {
            id = 'ndw'
            name = 'Norman Walsh'
          }
        }
      }

      groupId = "org.nineml"
      artifactId = filterName
      version = filterVersion
      from components.java
      artifact javadocJar
      artifact sourcesJar
    }
  }

  repositories {
    maven {
      url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
      credentials {
        username = project.findProperty("sonatypeUsername") ?: "NOUSER"
        password = project.findProperty("sonatypePassword") ?: "NOPASS"
      }
    }
  }
}

// ============================================================

task dockerup() {
  doLast {
    if (!DockerContainer.running(c_coffeefilter)) {
      DockerContainer.compose {
        command = "up"
        options = ["-p", "coffeefilter"]
        args = ["-d"]
      }
    }
  }
}

task dockerdown() {
  doLast {
    if (DockerContainer.running(c_coffeefilter)) {
      DockerContainer.compose {
        command = "down"
        options = ["-p", "coffeefilter"]
      }
    }
  }
}

// ============================================================

task helloWorld() {
  doLast {
    println('Hello, world.')
  }
}
